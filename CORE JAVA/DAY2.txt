Example code 01:
----------------
class Compute
  {
int a=12,b=5,res;
void add()
    {
res=a+b;
System.out.println(res);
   }
 }

class Demo1
{
public static void main(String[] args)
{
Compute c=new Compute();
c.add();
}
}

-------------------------------------------------
Methods with Parameters:
-----------------------
Example 01:
===========


class Compute
{
int res;
void add(int a,int b)
{
res=a+b;
System.out.println(res);
}
}

class Demo1
{
public static void main(String[]
 args)
{
int x=12,y=10;
Compute c=new Compute();
c.add(x,y);
}
}

Example 02:
===========
class Student
{
void display(String n,String d)     ===> Called function
{					 (formal parameters)
System.out.println("The name is"
+n);
System.out.println("The dept is"
+d);
}
}

class Demo1
{
public static void main(String[] args)
{
String name,dept;
name="Arun";
dept="IT";

Student s=new Student();
s.display(name,dept);		   ===> calling function
					(actual parameters)
}
}

Whenever we pass the values of a
 method as a parameter,
there can be two ways:

1. pass by value
2. pass by reference

Pass by value:
--------------
the actual value is copied from 
the actual parameter to
the formal parameters.
but the changes done in the formal
 parameters will not reflect
in actual parameters.

class Calculator
{
void product(int t)
{
System.out.println("Value of t="+t);//5
System.out.println(t=t*5);//25
System.out.println("Value of t="+t);//25
}
}

class Demo1
{
public static void main(String[] args)
{

int x=5;
Calculator c=new Calculator();
System.out.println("Value of x="+x);//5
c.product(x);
System.out.println("Value of x="+x);//5

}
}

Note: whenever we write a program with functions as
parameters, it by default 
follows
 the rule of pass by value.

Pass by Reference:
-----------------
Calculator c1=new Calculator();

Calculator c2=new Calculator();

here we are creating two objects, 
two memory block
is getting allocated.

Calculator c1=new Calculator();
Calculator c2=c1;

-- this line is an example of 
pass by Reference:
because the memory address which 
is
occupied by c1 is 
shared by c2 also.

class Calculator
{
int t;
void product(Calculator c1)
{
System.out.println(c1.t=c1.t*5);//60
}
}

class Demo1
{
public static void main(String[] args)
{

Calculator c=new Calculator();
c.t=12;

System.out.println("Before 
Calling
 c.t="+c.t);//12
c.product(c);
System.out.println("after Calling 
c.t="+c.t);//60

}
}





























































